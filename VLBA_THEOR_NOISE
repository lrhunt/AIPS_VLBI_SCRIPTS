import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import argparse

parser=argparse.ArgumentParser()
parser.add_argument("filein",help="AIPS output file (use listr to print first CAL table generated by indxr. optype = 'gain'; inext = 'cl'; inver=1)")
parser.add_argument("-sefd","--SEFD",type=float,help="Source Equivalent Flux Density for band. For VLBA can be found at https://science.nrao.edu/facilities/vlba/docs/manuals/oss/bands-perf default=439",default=439)
parser.add_argument("-eta","--eta",type=float,help="Efficiency of correlator. According to JIVE EVN calculator ~0.7",default=0.7)
parser.add_argument("-nif","--nif",type=float,help="Number of IFS, default=12",default=12)
parser.add_argument("-nch","--nchan",type=float,help="Number of channels in band, default=64",default=64)
parser.add_argument("-nu","--delta_nu",type=float,help="Frequency Resolution (bandwidth/number channels), default=0.5e6",default=0.5e6)
parser.add_argument("-of","--outfile",type=str,help="name of csv file that contains theoretical noise, default=sources.csv",default='sources.csv')
args=parser.parse_args()

with open(args.filein) as file:
	filedata=file.read()
fd2=filedata.replace('    ','   0')
fd2=fd2.replace('   0--','      ')
fd2=fd2.replace('--','  ')
with open(args.filein,'w') as file:
	file.write(fd2)


AIPS_CL_OUT=pd.read_csv(args.filein,header=7,delim_whitespace=True,error_bad_lines=False,warn_bad_lines=False)
for i in range(1,11):
    if i<10:
        x=str('0')+str(i)
    else:
        x=str(i)
    AIPS_CL_OUT[x]=AIPS_CL_OUT[x].apply(pd.to_numeric,errors='coerce')
AIPS_CL_OUT=AIPS_CL_OUT[(AIPS_CL_OUT['01']==0) | (AIPS_CL_OUT['01']==100)]
AIPS_CL_OUT=AIPS_CL_OUT[(AIPS_CL_OUT['02']==0) | (AIPS_CL_OUT['02']==100)]
AIPS_CL_OUT['Time']=pd.to_datetime(AIPS_CL_OUT['Time'])
AIPS_CL_OUT['Nant']=AIPS_CL_OUT.sum(axis=1)/100
sourcename=[]
timenant=[]
for i in AIPS_CL_OUT.Source.unique():
	sourcename.append(i)
	TN=0
	for j in range(0,len(AIPS_CL_OUT[AIPS_CL_OUT.Source==i].index.values)-1):
		a=AIPS_CL_OUT[AIPS_CL_OUT.Source==i].index.values[j+1]
		b=AIPS_CL_OUT[AIPS_CL_OUT.Source==i].index.values[j]
		if ((a-b)==1) | ((a-b)==2):
			TN=TN+((AIPS_CL_OUT.loc[a,'Time']-AIPS_CL_OUT.loc[b,'Time'])/np.timedelta64(1,'s')*AIPS_CL_OUT.loc[a,'Nant']*(AIPS_CL_OUT.loc[a,'Nant']-1))
	timenant.append(TN)
Calc_Theor_Noise=pd.DataFrame({'Source':sourcename,'TimeNant':timenant})
Calc_Theor_Noise['Theoretical Noise']=args.SEFD/(args.eta*np.sqrt(args.delta_nu*Calc_Theor_Noise['TimeNant']*args.nif*args.nchan))
Calc_Theor_Noise['First Contour']=Calc_Theor_Noise['Theoretical Noise']*3
Calc_Theor_Noise=Calc_Theor_Noise.sort_values('Source')

Calc_Theor_Noise.to_csv(path_or_buf=args.outfile)
